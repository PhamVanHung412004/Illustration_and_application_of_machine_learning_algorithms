import os
import streamlit as st
import streamlit.components.v1 as components
import threading
from fastapi import FastAPI, Depends, Cookie, Response, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import uvicorn
import sqlite3
import requests
import atexit
import uuid
from typing import Optional
import time

st.set_page_config(layout="wide")

# Kh·ªüi t·∫°o session state
if 'session_id' not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
    print(f"T·∫°o session m·ªõi: {st.session_state.session_id}")

# ====== Kh·ªüi t·∫°o DB SQLite ======
conn = sqlite3.connect("points.db", check_same_thread=False)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS clicks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_id TEXT NOT NULL,
    x REAL,
    y REAL,
    timestamp INTEGER NOT NULL
)""")
conn.commit()

# Thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n cho session (10 ph√∫t = 600 gi√¢y)

# H√†m ƒë·ªÉ x√≥a session c≈© khi ·ª©ng d·ª•ng tho√°t

# ====== FastAPI server ======
app_api = FastAPI()

# CORS middleware
app_api.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)



class ClickPoint(BaseModel):
    x: float
    y: float
    session_id: str



# T·∫°o session ID m·ªõi n·∫øu ch∆∞a c√≥
def get_session_id(session_id: Optional[str] = Cookie(None)):
    if not session_id:
        return str(uuid.uuid4())
    return session_id


@app_api.post("/save")
def save_point(point: ClickPoint):
    print()
    print("hung hung")
    print("hung hung")
    # In t·ªça ƒë·ªô ra terminal m·ªói khi nh·∫≠n ƒë∆∞·ª£c click
    points_x_new = point.x
    points_y_new = point.y
    print('-' * 1000)
    print("y test : ", points_y_new)
    print(f"Click detected at coordinates: x = {abs(points_x_new)}, y = {abs(points_y_new - 400)} for session: {point.session_id}")
    
    # L∆∞u t·ªça ƒë·ªô c√πng v·ªõi session ID v√† timestamp
    current_time = int(time.time())
    c.execute("INSERT INTO clicks (session_id, x, y, timestamp) VALUES (?, ?, ?, ?)", 
              (point.session_id, point.x, point.y, current_time))
    conn.commit()
    return {"message": "ƒê√£ l∆∞u v√†o database!"}

@app_api.get("/export/{session_id}")
def export_to_txt(session_id: str):
    # L·∫•y t·∫•t c·∫£ c√°c ƒëi·ªÉm c·ªßa session hi·ªán t·∫°i
    rows = c.execute("SELECT x, y FROM clicks WHERE session_id = ? ORDER BY id", (session_id,)).fetchall()

    if rows:
        # In danh s√°ch c√°c ƒëi·ªÉm ra terminal
        # for row in rows:
        #     print(f"Point: {row[0]}, {row[1]}")
        
        # L∆∞u c√°c t·ªça ƒë·ªô v√†o file .txt
        file_path = f"exported_points_{session_id}.txt"
        with open(file_path, "w") as file:
            for row in rows:
                file.write(f"{row[0]}, {row[1]}\n")
        return {"message": f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c xu·∫•t v√†o {file_path}", "file": file_path}
    else:
        return {"message": "Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ xu·∫•t."}

# X√≥a d·ªØ li·ªáu c·ªßa m·ªôt session c·ª• th·ªÉ
@app_api.delete("/clear/{session_id}")
def clear_session_data(session_id: str):
    c.execute("DELETE FROM clicks WHERE session_id = ?", (session_id,))
    conn.commit()
    return {"message": f"ƒê√£ x√≥a d·ªØ li·ªáu c·ªßa session {session_id}!"}

# Th√™m route ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
@app_api.get("/ping")
def ping():
    return {"status": "online"}

# T·∫°o session m·ªõi v√† tr·∫£ v·ªÅ cookie
@app_api.get("/new_session")
def create_new_session(response: Response):
    session_id = str(uuid.uuid4())
    response.set_cookie(key="session_id", value=session_id)
    return {"session_id": session_id}

# ƒê·ªãnh k·ª≥ x√≥a session c≈©
@app_api.get("/cleanup")
def cleanup_old_data():
    current_time = int(time.time())
    expiry_time = current_time - SESSION_EXPIRY
    c.execute("DELETE FROM clicks WHERE timestamp < ?", (expiry_time,))
    deleted_count = c.rowcount
    conn.commit()
    return {"message": f"ƒê√£ x√≥a {deleted_count} b·∫£n ghi c≈©."}

def run_api():
    uvicorn.run(app_api, host="0.0.0.0", port=8000)

threading.Thread(target=run_api, daemon=True).start()

# Ch·∫°y d·ªçn d·∫πp session c≈© m·ªói 5 ph√∫t



# ====== Streamlit app ======
st.title("Canvas HTML5 + JavaScript + L∆∞u v√†o SQLite")


# Hi·ªÉn th·ªã Session ID
st.sidebar.subheader("üîë Session ID c·ªßa b·∫°n")
st.sidebar.code(st.session_state.session_id)
st.sidebar.info("üí° ID n√†y gi√∫p ph√¢n bi·ªát d·ªØ li·ªáu c·ªßa b·∫°n v·ªõi ng∆∞·ªùi d√πng kh√°c.", icon="‚ÑπÔ∏è")

components.html(f"""
<canvas id="myCanvas" width="1000" height="4000"
        style="border:1px solid #000000; background-color: white;"></canvas>

<script>
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");
const sessionId = "{st.session_state.session_id}";

// H√†m g·ª≠i y√™u c·∫ßu x√≥a d·ªØ li·ªáu c·ªßa session n√†y
function clearSessionData() {{
    fetch("http://localhost:8000/clear/" + sessionId, {{
        method: "DELETE"
    }})
    .then(response => response.json())
    .then(data => console.log("ƒê√£ x√≥a d·ªØ li·ªáu session:", data.message))
    .catch(error => console.error("L·ªói khi x√≥a d·ªØ li·ªáu session:", error));
}}

// B·∫Øt s·ª± ki·ªán khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang ho·∫∑c ƒë√≥ng tr√¨nh duy·ªát
window.addEventListener('beforeunload', function(e) {{
    clearSessionData();
    // ƒêo·∫°n code d∆∞·ªõi ƒë√¢y t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü khi ng∆∞·ªùi d√πng ƒë√≥ng trang
    // Th√¥ng b√°o n√†y c√≥ th·ªÉ ƒë∆∞·ª£c hi·ªÉn th·ªã ho·∫∑c kh√¥ng t√πy tr√¨nh duy·ªát
    e.preventDefault();
    e.returnValue = '';
}});

// T·∫£i d·ªØ li·ªáu c≈© c·ªßa session (n·∫øu c√≥)
function loadSessionData() {{
    fetch("http://localhost:8000/get_points/" + sessionId)
        .then(response => response.json())
        .then(data => {{
            if (data.points && data.points.length > 0) {{
                // V·∫Ω l·∫°i c√°c ƒëi·ªÉm ƒë√£ l∆∞u
                data.points.forEach(point => {{
                    drawPoint(point.x, point.y);
                }});
                console.log("ƒê√£ t·∫£i " + data.points.length + " ƒëi·ªÉm t·ª´ session tr∆∞·ªõc.");
            }}
        }})
        .catch(error => console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error));
}}

// H√†m v·∫Ω ƒëi·ªÉm
function drawPoint(x, y) {{
    // V·∫Ω ch·∫•m
    ctx.beginPath();
    ctx.arc(x, y, 5, 0, 2 * Math.PI);
    ctx.fillStyle = "black";
    ctx.fill();

    ctx.beginPath();
    ctx.arc(x, y, 4, 0, 2 * Math.PI);
    ctx.fillStyle = "white";
    ctx.fill();

    ctx.font = "14px Arial";
    ctx.fillStyle = "red";
    ctx.fillText(``, x + 10, y - 10);
}}

canvas.addEventListener("click", function(event) {{
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // V·∫Ω ƒëi·ªÉm
    drawPoint(x, y);

    // G·ª≠i POST request v·ªÅ API v·ªõi t·ªça ƒë·ªô canvas ch√≠nh x√°c v√† session ID
    fetch("http://localhost:8000/save", {{
        method: "POST",
        headers: {{
            "Content-Type": "application/json"
        }},
        body: JSON.stringify({{x: x, y: y, session_id: sessionId}})
    }})
    .then(response => response.json())
    .then(data => console.log(data.message))
    .catch(error => console.error("L·ªói:", error));
}});

// T·∫£i d·ªØ li·ªáu khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', loadSessionData);
</script>
""", height=4020)

# Th√™m n√∫t "Export" ƒë·ªÉ t·∫£i d·ªØ li·ªáu v·ªÅ file .txt
if st.button("T·∫£i v·ªÅ t·ªça ƒë·ªô d∆∞·ªõi d·∫°ng .txt"):
    response = requests.get(f"http://localhost:8000/export/{st.session_state.session_id}")
    if response.status_code == 200:
        file_url = response.json().get("file")
        st.success(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c xu·∫•t. B·∫°n c√≥ th·ªÉ t·∫£i v·ªÅ t·ª´: {file_url}")
    else:
        st.error("L·ªói khi xu·∫•t d·ªØ li·ªáu!")

# Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l∆∞u trong DB cho session hi·ªán t·∫°i
st.subheader("üìç C√°c t·ªça ƒë·ªô ƒë√£ l∆∞u trong session c·ªßa b·∫°n:")
rows = c.execute("SELECT id, x, y FROM clicks WHERE session_id = ? ORDER BY id", 
                 (st.session_state.session_id,)).fetchall()
if rows:
    for row in rows:
        st.text(f"{row[0]}. ({row[1]}, {row[2]})")
else:
    st.write("Ch∆∞a c√≥ d·ªØ li·ªáu trong session n√†y.")

# Hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa database
st.sidebar.subheader("‚öôÔ∏è Tr·∫°ng th√°i")
try:
    response = requests.get("http://localhost:8000/ping")
    if response.status_code == 200:
        st.sidebar.success("‚úÖ K·∫øt n·ªëi API: Ho·∫°t ƒë·ªông")
    else:
        st.sidebar.error("‚ùå K·∫øt n·ªëi API: L·ªói")
except:
    st.sidebar.error("‚ùå K·∫øt n·ªëi API: Kh√¥ng th·ªÉ k·∫øt n·ªëi")

st.sidebar.info("üìå Khi b·∫°n ƒë√≥ng trang web, ch·ªâ d·ªØ li·ªáu c·ªßa session c·ªßa b·∫°n s·∫Ω b·ªã x√≥a, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ng∆∞·ªùi d√πng kh√°c.", icon="‚ÑπÔ∏è")

# Th√™m n√∫t "X√≥a d·ªØ li·ªáu c·ªßa session n√†y"
if st.sidebar.button("üóëÔ∏è X√≥a d·ªØ li·ªáu c·ªßa session n√†y"):
    response = requests.delete(f"http://localhost:8000/clear/{st.session_state.session_id}")
    
    if response.status_code == 200:
        st.sidebar.success("ƒê√£ x√≥a d·ªØ li·ªáu c·ªßa session n√†y.")
    else:
        st.sidebar.error("L·ªói khi x√≥a d·ªØ li·ªáu.")